// modules are defined as an array
// [ module function, map of requires ]
// map of requires is short require name -> numeric require
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles
parcelRequire=function(e,r,n,i){
  // Save the require from previous bundle to this closure if any
  var t,u="function"==typeof parcelRequire&&parcelRequire,o="function"==typeof require&&require;function newRequire(n,i){if(!r[n]){if(!e[n]){
  // if we cannot find the module within our internal map or
  // cache jump to the current global require ie. the last bundle
  // that was added to the page.
  var t="function"==typeof parcelRequire&&parcelRequire;if(!i&&t)return t(n,!0);
  // If there are other bundles on this page the require from the
  // previous one is saved to 'previousRequire'. Repeat this as
  // many times as there are bundles until the module is found or
  // we exhaust the require chain.
  if(u)return u(n,!0);
  // Try the node require function if it exists.
  if(o&&"string"==typeof n)return o(n);var c=new Error("Cannot find module '"+n+"'");throw c.code="MODULE_NOT_FOUND",c}localRequire.resolve=function resolve(r){return e[n][1][r]||r},localRequire.cache={};var l=r[n]=new newRequire.Module(n);e[n][0].call(l.exports,localRequire,l,l.exports,this)}return r[n].exports;function localRequire(e){return newRequire(localRequire.resolve(e))}}newRequire.isParcelRequire=!0,newRequire.Module=function Module(e){this.id=e,this.bundle=newRequire,this.exports={}},newRequire.modules=e,newRequire.cache=r,newRequire.parent=u,newRequire.register=function(r,n){e[r]=[function(e,r){r.exports=n},{}]};for(var c=0;c<n.length;c++)try{newRequire(n[c])}catch(e){
  // Save first error but execute all entries
  t||(t=e)}if(n.length){
  // Expose entry point to Node, AMD or browser globals
  // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
  var l=newRequire(n[n.length-1]);
  // CommonJS
  "object"==typeof exports&&"undefined"!=typeof module?module.exports=l:"function"==typeof define&&define.amd&&define((function(){return l}))}
  // Override the current require with this new one
  if(parcelRequire=newRequire,t)
  // throw error from earlier, _after updating parcelRequire_
  throw t;return newRequire}({GOVZ:[function(e,r,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var i=function plugin(e,r){e.afterEach((function(e,r){
  // We load the HTML inside a DOM node to allow for manipulation
  var n=document.createElement("div");n.innerHTML=e,n.querySelectorAll("pre[data-lang=mermaid]").forEach((function(e){
  // Create a <div class="mermaid"> to replace the <pre>
  var r=document.createElement("div");r.textContent=e.textContent,r.classList.add("mermaid"),// Replace
  e.parentNode.replaceChild(r,e)})),r(n.innerHTML)})),e.doneEach((function(){mermaid.init({},".mermaid")}))};n.default=i},{}],Focm:[function(e,r,n){"use strict";var i=function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}(e("./plugin"));window.$docsify||(window.$docsify={}),window.$docsify.plugins=(window.$docsify.plugins||[]).concat(i.default)},{"./plugin":"GOVZ"}]},{},["Focm"]);
  // run
  mermaid.initialize({ startOnLoad: true });
